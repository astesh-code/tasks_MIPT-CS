#include <stdio.h>
#include <stdlib.h>
int len;

int min(int a, int b) {
    if (a<b) return a;
    else return b;
}

int max(int a, int b) {
    if (a>b) return a;
    else return b;
}

void change(int * tree, int n, int l, int r, int i, int val) {
        if (l == r) tree[n]=val;
        else if (i<=(r+l)/2){
            change(tree, 2*n, l, (r+l)/2, i, val);
            tree[n]=tree[2*n]^tree[2*n+1];
        } else {
            change(tree, 2*n+1, (r+l)/2+1, r, i, val);
            tree[n]=tree[2*n]^tree[2*n+1];
        }
}

int get(int * tree, int n, int l, int r, int lf, int rf) {
    if (r<l || rf<lf) return 0;
    else if (lf==l && rf==r) return tree[n];
    else return get(tree, 2*n, l, (r+l)/2, lf ,min(rf, (r+l)/2))^get(tree, 2*n+1, (r+l)/2+1, r, max(lf, (r+l)/2+1), rf);
}

void gen(int * tree, const int * a, int l, int r, int n) {
    if (l!=r) {
        gen(tree, a, l, (r + l) / 2, 2 * n);
        gen(tree, a, (r + l) / 2 + 1, r, 2 * n + 1);
        tree[n]=tree[2*n]^tree[2*n+1];
    } else {
        if (r<len) tree[n]=a[r];
        else tree[n]=0;
    }
}

int main() {
    int m;
    scanf("%d%d", &len,&m);

    int * vec = (int *) malloc(len* sizeof(int));
    int * tree = (int *) calloc(4*len+1, sizeof(int));

    for (int i=0; i<len; i++) scanf("%d", &vec[i]);
    gen(tree, vec, 0, len-1, 1);

    for (int i=0; i<m; i++) {
        int type, a, b;
        scanf("%d%d%d", &type, &a, &b);
        if (type==1) printf("%d\n", get(tree, 1, 0, len-1, a, b));
        else change(tree, 1, 0, len-1, a, b);
    }
    return 0;
}
